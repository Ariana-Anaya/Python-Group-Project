def upgrade():
    # remove duplicate businesses, keeping only the one with the lowest id
    op.execute("""
    DELETE FROM businesses
    WHERE id NOT IN (
      SELECT MIN(id)
      FROM businesses
      GROUP BY name, address, city, state
    );
    """)
    # now add the unique constraint
    with op.batch_alter_table('businesses') as batch_op:
        batch_op.create_unique_constraint(
            'uix_business_location',
            ['name', 'address', 'city', 'state']
        )



"""add unique constraint to businesses

Revision ID: a4bebe05d472
Revises: 2d1527562b1e
Create Date: 2025-07-16 17:38:27.865650

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a4bebe05d472'
down_revision = '2d1527562b1e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('businesses', schema=None) as batch_op:
        batch_op.create_unique_constraint('uix_business_location', ['name', 'address', 'city', 'state'])

    # ### end Alembic commands ###


def downgrade():
        op.execute("DROP TABLE IF EXISTS _alembic_tmp_businesses;")
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('businesses', schema=None) as batch_op:
        batch_op.drop_constraint('uix_business_location', type_='unique')

    # ### end Alembic commands ###
